name: Pruebas unitarias
on:
 push:
     branches:
         - 'testing_**'
jobs:

  generate:
    name: Generando version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # required for github-action-get-previous-tag

      - name: Get Previous tag
        id: previoustag
        uses: 'WyriHaximus/github-action-get-previous-tag@v1'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Get next version
        id: next
        uses: 'WyriHaximus/github-action-next-release-version@1.0.0'
        with:
          version: ${{ steps.previoustag.outputs.tag }}

      - name: 'Get next minor version'
        id: semvers
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.previoustag.outputs.tag }}
          
      - name: print VERSIONS
        run: |
          echo "PREVIOUS TAG ${{ steps.previoustag.outputs.tag }}"
          echo "SEMVERS_R PREV TAG ${{ steps.semvers.outputs.r_version }}"
          
          echo "VERSION PREV TAG ${{ steps.next.outputs.version }}"
          echo "R_VERSION PREV TAG ${{ steps.next.outputs.r_version }}"
          
          echo "SEMVERS_V_PATCH PREV TAG ${{ steps.semvers.outputs.v_patch }}"
          echo "SEMVERS_V_MINOR PREV TAG ${{ steps.semvers.outputs.v_minor }}"
          echo "SEMVERS_V_MAJOR PREV TAG ${{ steps.semvers.outputs.v_major }}"

  pruebas:
    name: Pruebas
    permissions: write-all
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
    if: ${{ contains(github.event.head_commit.message, '(Azul)') && contains(github.ref,'integration') }}
    steps:
    - name: Checkout de repositorio
      uses: actions/checkout@v3
    - name: Configuración de entorno de python
      uses: actions/setup-python@v4
      with:
          python-version: '3.9'
    - name: Instalación de librerías y dependencias
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Mezcla develop -> ${{ github.ref }}
      uses: tukasz/direct-merge-action@master
      with:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         source-branch: develop
         target-branch: ${{ github.ref }}
         commit-message: "Se realiza merge de develop en ${{ github.ref }}"
    - name: Correr pruebas
      id: correr-pruebas
      run: |
        python -m unittest -v 
    - name:  Cubrimiento personalizado
      id: cubrimiento
      run: |
          coverage run -m unittest 
          coverage report -m
           
  automerge:
    needs: pruebas
    permissions: write-all
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
    if: ${{ !endsWith(github.event.head_commit.message,'[release]')}}
    steps:
     - name: Mezcla ${{ github.ref }} -> develop
       uses: tukasz/direct-merge-action@master
       with:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         source-branch: ${{ github.ref }}
         target-branch: develop
         commit-message: "Se realiza merge de la ${{ github.ref }} en develop"
         
  prepare_release:
    needs: pruebas
    permissions: write-all
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
    if: ${{ endsWith(github.event.head_commit.message,'[release]')}}
    steps:
     - name: Mezcla ${{ github.ref }} -> develop
       uses: tukasz/direct-merge-action@master
       with:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         source-branch: ${{ github.ref }}
         target-branch: develop
         commit-message: "Merge completo. Listo para crear [release]"
         
             
  invoke_workflow:
    needs: prepare_release
    permissions: write-all
    if: ${{ endsWith(github.event.head_commit.message,'[release]')}}   
    uses: fanpay/git_actions/.github/workflows/release.yml@main
    with:
      release_version: release/1.0.3
         
