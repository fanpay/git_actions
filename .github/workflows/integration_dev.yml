name: Pruebas unitarias
on:
 push:
     branches:
         - 'testing_**'
  
jobs:
  tests:
    name: Pruebas
    permissions: write-all
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
    if: ${{ contains(github.event.head_commit.message, '(Azul)') && contains(github.ref,'integration') }}
    steps:
    - name: Checkout de repositorio
      uses: actions/checkout@v3
    - name: Configuración de entorno de python
      uses: actions/setup-python@v4
      with:
          python-version: '3.9'
    - name: Instalación de librerías y dependencias
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Mezcla develop -> ${{ github.ref }}
      uses: tukasz/direct-merge-action@master
      with:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         source-branch: develop
         target-branch: ${{ github.ref }}
         commit-message: "Se realiza merge de develop en ${{ github.ref }}"
    - name: Correr pruebas
      id: correr-pruebas
      run: |
        python -m unittest -v 
    - name:  Cubrimiento personalizado
      id: cubrimiento
      run: |
          coverage run -m unittest 
          coverage report -m
           
  automerge:
    needs: tests
    permissions: write-all
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
    if: ${{ !contains(github.event.head_commit.message,'[release]')}}
    steps:
     - name: Mezcla ${{ github.ref }} -> develop
       uses: tukasz/direct-merge-action@master
       with:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         source-branch: ${{ github.ref }}
         target-branch: develop
         commit-message: "Se realiza merge de la ${{ github.ref }} en develop"
         
  prepare_release:
    needs: tests
    permissions: write-all
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
    if: ${{ contains(github.event.head_commit.message,'[release]')}}
    steps:
     - name: Mezcla ${{ github.ref }} -> develop
       uses: tukasz/direct-merge-action@master
       with:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         source-branch: ${{ github.ref }}
         target-branch: develop
         commit-message: "Merge completo. Listo para crear [release]"
         
  generate_version:
    name: Generando version
    needs: prepare_release
    #if: ${{ contains(github.event.head_commit.message,'[release]')}}   
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    outputs:
      release_version: ${{ steps.setting_version.outputs.RELEASE_VERSION }}
      release_tag: ${{ steps.setting_version.outputs.RELEASE_TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get Previous tag
        id: previoustag
        uses: 'WyriHaximus/github-action-get-previous-tag@v1'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 'Get next version'
        id: semvers
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.previoustag.outputs.tag }}

      - name: Setting MAJOR version
        id: setting_version
        run: |
          if [ ${{ contains(github.event.head_commit.message,'[major]')}} ]; then
            echo "RELEASE_VERSION=${{ steps.semvers.outputs.major }}" >> $GITHUB_OUTPUT
            echo "RELEASE_TAG=${{ steps.semvers.outputs.v_major }}" >> $GITHUB_OUTPUT
            
          else if [ ${{ contains(github.event.head_commit.message,'[minor]')}} ]; then
            echo "RELEASE_VERSION=${{ steps.semvers.outputs.minor }}" >> $GITHUB_OUTPUT
            echo "RELEASE_TAG=${{ steps.semvers.outputs.v_minor }}" >> $GITHUB_OUTPUT
            
          else if [ ${{ contains(github.event.head_commit.message,'[patch]')}} ]; then
            echo "RELEASE_VERSION=${{ steps.semvers.outputs.patch }}" >> $GITHUB_OUTPUT
            echo "RELEASE_TAG=${{ steps.semvers.outputs.v_patch }}" >> $GITHUB_OUTPUT
            
          else
            echo "Versión no encontraba. Intenta agregar la etiqueta [minor] ó [major] ó [path] de acuerdo al tipo de versión que se desee liberar. Se finaliza job con fallos y no se genera versión"
            exit 1
          fi
        shell: bash
      - name: Read exported variable
        run: |
          echo "RELEASE_TAG: ${{ steps.setting_version.outputs.RELEASE_TAG }}"
          echo "RELEASE_VERSION: ${{ steps.setting_version.outputs.RELEASE_VERSION }}"

  invoke_workflow:
    needs: [prepare_release, generate_version]
    permissions: write-all
    if: ${{ contains(github.event.head_commit.message,'[release]')}}   
    uses: fanpay/git_actions/.github/workflows/release.yml@main
    with:
      release_version: ${{ needs.generate_version.outputs.release_version }}
      release_tag: ${{ needs.generate_version.outputs.release_tag }}
         
